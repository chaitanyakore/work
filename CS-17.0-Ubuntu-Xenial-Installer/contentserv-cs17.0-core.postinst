#!/bin/bash

set -e

# Source debconf library
. /usr/share/debconf/confmodule

# Tweaks can come here
CURL_EMULATED_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0"
CS_PROTO="http://"
CS_HOST=localhost
CS_FOLDER="/"
CS_NEW_PROJECT=""
CS_PROJECT_CONF=""
# These parameters are standard and normally should not be tweaked
CS_APP=/var/lib/contentserv-cs
CS_DEFAULT_TEMPLATE=admin/core/samples/default
CS_APACHE_CONF=/etc/apache2/conf-available/contentserv.conf
CS_VHOST_CONF=/etc/apache2/sites-available/000-default.conf
CS_VHOST_TEMPLATE=/var/lib/contentserv-cs/admin/core/samples/apache-vhost/cs-vhost-template.conf
CS_SIMPLIFIED_INSTALL='/admin/install.php?CreateProject=true&simple=true'
CS_LICENSE_ACTIVATION='/admin/install.php?License=true'
CS_PROJECT_INSTALL_LOG=/var/log/cs_project_install.log
CS_SECURITY_FILE=/var/lib/contentserv-cs/admin/conf/CSSecurity.ini
CS_APACHE_ALREADY_RUNNING=0

ARG_1="$1"
ARG_2="$2"



apache_status_read() {
    if service apache2 status | grep -q -e "not running" ;
    then
        echo "Apache is NOT running, will be started for the install process and stopped just before exit"
        CS_APACHE_ALREADY_RUNNING=0
    else
        echo "Apache is running, keeping the state for the clean exit"
        CS_APACHE_ALREADY_RUNNING=1
    fi
}

apache_start_if_not_running() {
    if [ "$CS_APACHE_ALREADY_RUNNING" -eq 0 ] ;
    then
        if ! service apache2 start ;
        then
            echo "Unable to start apache using init.d script"
            exit 1
        fi
    fi
}

# apache_cleanup stops apache if it wasn't running upon postinst start
apache_cleanup() {
    if [ "$CS_APACHE_ALREADY_RUNNING" -eq 0 ] ;
    then
        echo "Apache wasn't running upon postinst, will be stopped"
        service apache2 stop
    else
        echo "Apache was running upon postinst, leaving it running"
    fi
}


apache_reload_and_check() {
    if apachectl -t;
    then
        echo "Config is OK, restarting apache daemon..."
        service apache2 restart
    else
        echo "Apache rejects configuration, please check the config"
        exit 1
    fi
    echo "${CS_URL}${CS_SIMPLIFIED_INSTALL} will be checked, sleeping 5 sec to ensure apache reload"
    sleep 5
    if curl -s -N -A "$CURL_EMULATED_AGENT" "${CS_URL}${CS_SIMPLIFIED_INSTALL}" | grep -q -e "^.*title.*Create new project.*" ;
    then
        echo CS health check OK
    else
        echo CS is either not responging or already configured
        exit 1
    fi
}

do_alias() {
    apache_start_if_not_running
    db_input high contentserv-cs-core/app_subfolder || true
    db_go
    db_get contentserv-cs-core/app_subfolder
    CS_FOLDER="$RET"
    # Trim trailing slashes if necessary and disallow empty string and single slash
    case $CS_FOLDER in
        *[!/]*/)
            CS_FOLDER=${CS_FOLDER%${CS_FOLDER##*[!/]}}
            ;;
        /|"")
            echo "Root cannot be an alias in this configuration"
            exit 1
            ;;
    esac
    CS_URL=${CS_PROTO}${CS_HOST}"/"${CS_FOLDER}
    sed -i -e "s#^\(\s*Alias\).*#\1 \/${CS_FOLDER} ${CS_APP}#g" ${CS_APACHE_CONF}
    sed -i -e "s#^\(\s*<Directory\).*>#\1 ${CS_APP}>#g" ${CS_APACHE_CONF}
    a2enconf contentserv
    apache_reload_and_check
}

do_vhost() {
    apache_start_if_not_running
    db_input high contentserv-cs-core/app_vhost || true
    db_go
    db_get contentserv-cs-core/app_vhost
    CS_HOST="$RET"
    # first proof that the name is resolvable and the host is answering via http
    if ! curl -s ${CS_PROTO}${CS_HOST} ;
    then
        echo "No repsonse from ${CS_PROTO}${CS_HOST}, aborting..."
        exit 1
    fi
    # Create the corresponding config file from template
    CS_VHOST_CONF="/etc/apache2/sites-available/${CS_HOST}.conf"
    if ! cp -f ${CS_VHOST_TEMPLATE} ${CS_VHOST_CONF} ;
    then
        echo "Unable to create/overwrite vhost config file, aborting..."
        exit 1
    fi
    sed -i -e "s#^\(\s*DocumentRoot\).*#\1 ${CS_APP}#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*ServerName\).*#\1 ${CS_HOST}#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*ErrorLog.*\}\/\).*#\1${CS_HOST}-error.log#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*CustomLog.*\}\/\).*#\1${CS_HOST}-access.log combined#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*<Directory\).*>#\1 ${CS_APP}>#g"  ${CS_VHOST_CONF}
    if ! a2ensite ${CS_HOST} ;
    then
        echo "Failed to enable vhost configuration, aborting..."
        exit 1
    fi
    CS_URL=${CS_PROTO}${CS_HOST}
    apache_reload_and_check
}

do_default_vhost() {
    apache_start_if_not_running
    echo "Placeholder..."

if ! curl -s ${CS_PROTO}${CS_HOST} ;
    then
        echo "No repsonse from ${CS_PROTO}${CS_HOST}, aborting..."
        exit 1
    fi
    # Create the corresponding config file from template
    #CS_VHOST_CONF="/etc/apache2/sites-available/${CS_HOST}.conf"
    if ! cp -f ${CS_VHOST_TEMPLATE} ${CS_VHOST_CONF} ;
    then
        echo "Unable to create/overwrite vhost config file, aborting..."
        exit 1
    fi

    sed -i -e "s#^\(\s*DocumentRoot\).*#\1 ${CS_APP}#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*ServerName\).*#\1 ${CS_HOST}#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*ErrorLog.*\}\/\).*#\1${CS_HOST}-error.log#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*CustomLog.*\}\/\).*#\1${CS_HOST}-access.log combined#g" ${CS_VHOST_CONF}
    sed -i -e "s#^\(\s*<Directory\).*>#\1 ${CS_APP}>#g"  ${CS_VHOST_CONF}
CS_URL=${CS_PROTO}${CS_HOST}
apache_reload_and_check



}


do_new_project_restore_from_template() {
    echo "Create project directory from template..."
    if ! cp -r ${CS_APP}/${CS_DEFAULT_TEMPLATE} ${CS_APP}/${CS_NEW_PROJECT} ;
    then
        exit 1
    fi
    echo "Fixing permissions..."
    if ! chown -R www-data:www-data ${CS_APP}/${CS_DEFAULT_TEMPLATE} ${CS_APP}/${CS_NEW_PROJECT} ;
    then
        exit 1
    fi
    CS_PROJECT_CONF="${CS_APP}/${CS_NEW_PROJECT}/data/config.php"
    if [ ! -f $CS_PROJECT_CONF ]
    then
        echo "config.php does not exist!"
        exit 1
    fi
    # change the content of config.php according to user input
    db_get contentserv-cs-core/db_host
    CS_DB_HOST="$RET"
    # If DB is local, restart local DB server to apply Contentserv-specific settings
    if [ "$CS_DB_HOST" = "localhost" ] || [ "$CS_DB_HOST" = "127.0.0.1" ];
    then
        service mysql restart
    fi
    db_get contentserv-cs-core/db_name
    CS_DB_NAME="$RET"
    db_get contentserv-cs-core/db_user
    CS_DB_USER="$RET"
    db_get contentserv-cs-core/db_table_prefix
    CS_DB_TABLE_PREFIX="$RET"
    db_get contentserv-cs-core/db_password
    # encode DB password
    CS_DB_PASS_PLAIN="$RET"
    CS_DB_PASS_ENCODED=$(printf '%s' "$RET" | base64)
    # echo "All variables:"
    # echo "CS_DB_HOST: $CS_DB_HOST"
    # echo "CS_DB_NAME: $CS_DB_NAME"
    # echo "CS_DB_USER: $CS_DB_USER"
    # echo "CS_DB_TABLE_PREFIX: $CS_DB_TABLE_PREFIX"
    # echo "CS_DB_PASS_ENCODED: $CS_DB_PASS_ENCODED"
    # Edit config.php in-place
    ex -s -c '15i|  '"'"'Database:-Password'"'"' => '"'"''"'"',' -c x ${CS_PROJECT_CONF}
    sed -i -e "s#^.*Database:-ContentTable.*#  \'Database:-ContentTable\' => \'$CS_DB_TABLE_PREFIX\',#g" ${CS_PROJECT_CONF}
    sed -i -e "s#^.*Database:-Host.*#  \'Database:-Host\' => \'$CS_DB_HOST\',#g" ${CS_PROJECT_CONF}
    sed -i -e "s#^.*Database:-Name.*#  \'Database:-Name\' => \'$CS_DB_NAME\',#g" ${CS_PROJECT_CONF}
    sed -i -e "s#^.*Database:-User.*#  \'Database:-User\' => \'$CS_DB_USER\',#g" ${CS_PROJECT_CONF}
    sed -i -e "s#^.*Database:-Password.*#  \'Database:-Password\' => \'$CS_DB_PASS_ENCODED\',#g" ${CS_PROJECT_CONF}
    sed -i -e "s#^.*NewProject:-Name.*#  \'NewProject:-Name\' => \'$CS_NEW_PROJECT\',#g" ${CS_PROJECT_CONF}
#    sed -i -e "s#^.*core:ProjectName.*#  \'core:ProjectName\' => \'$CS_NEW_PROJECT\',#g" ${CS_PROJECT_CONF}
#    sed -i -e "s#^.*core:ServerPath.*#  \'core:ServerPath\' => \'$CS_APP\',#g" ${CS_PROJECT_CONF}
#    sed -i -e "s#^.*core:ServerName.*#  \'core:ServerName\' => \'$CS_HOST\',#g" ${CS_PROJECT_CONF}
    # Create DB if not exists
    DB_CREATE_QUERY="CREATE DATABASE IF NOT EXISTS \`$CS_DB_NAME\` DEFAULT CHARACTER SET UTF8;"
    if ! echo $DB_CREATE_QUERY | mysql -u "$CS_DB_USER" -h "$CS_DB_HOST" --password="$CS_DB_PASS_PLAIN";
    then
        echo "MySQL returned: $?"
        exit 1
    fi
    CS_PROJECT_INSTALL_COMMAND="/admin/install.php?action=install&Installation=true&ctsWebsite=$CS_NEW_PROJECT&doBackup=false"
    if ! curl -s -N -A "$CURL_EMULATED_AGENT" "${CS_URL}$CS_PROJECT_INSTALL_COMMAND" | html2text | tee $CS_PROJECT_INSTALL_LOG | grep -q "Installation finished" ;
    then
        echo "Failed to create new project, see the log file for details: $CS_PROJECT_INSTALL_LOG"
        exit 1
    fi
    echo "Project $CS_NEW_PROJECT has been successfully created, see the log file for details: $CS_PROJECT_INSTALL_LOG"
    echo "Contentserv-CS uses separate license for each project, please open the License activation page in browser: ${CS_URL}${CS_LICENSE_ACTIVATION}"

sed -i -e "s/use_security_xml.*/use_security_xml = on/g" ${CS_SECURITY_FILE}
sed -i -e "s/soft_security_mode.*/soft_security_mode = off/g" ${CS_SECURITY_FILE}
chmod 444 ${CS_APP}/index.php ${CS_APP}/admin/index.php ${CS_APP}/${CS_NEW_PROJECT}/index.php


}

do_new_project() {
    apache_start_if_not_running    
    # Collect necessary credentials (grouped)
    db_input high contentserv-cs-core/project_name || true
    db_input high contentserv-cs-core/db_host || true
    db_input high contentserv-cs-core/db_name || true
    db_input high contentserv-cs-core/db_table_prefix || true
    db_input high contentserv-cs-core/db_user || true
    db_go
    if [ "$ARG_1" == "configure" ];
    then
        while :;
        do
            RET=""
            db_input high contentserv-cs-core/db_password || true
            db_go
            db_get contentserv-cs-core/db_password
            # if password isn't empty we ask for password verification
            if [ -z "$RET" ]; 
            then
                db_fset contentserv-cs-core/db_password seen false
                db_fset contentserv-cs-core/db_password_again seen false
                break
            fi
            ROOT_PW="$RET"
            db_input high contentserv-cs-core/db_password_again || true
            db_go
            db_get contentserv-cs-core/db_password_again
            if [ "$RET" == "$ROOT_PW" ]; 
            then
                ROOT_PW=''
                break
            fi
            db_fset contentserv-cs-core/db_password_mismatch seen false
            db_input critical contentserv-cs-core/db_password_mismatch
            db_set contentserv-cs-core/db_password ""
            db_set contentserv-cs-core/db_password_again ""
            db_go
        done
    fi
    db_get contentserv-cs-core/project_name
    CS_NEW_PROJECT="$RET"

    # Proceed to project creation, call the procedure only if the folder does not exist
    if [ ! -d "${CS_APP}/${CS_NEW_PROJECT}" ];
    then
        echo "OK, create new project in ${CS_APP}/${CS_NEW_PROJECT}"
        do_new_project_restore_from_template
    else
        echo "Unable to create new project in ${CS_APP}/${CS_NEW_PROJECT}"
        db_fset contentserv-cs-core/project_folder_exists seen false
        db_input critical contentserv-cs-core/project_folder_exists
        db_go
    fi

    # Wipe the passwords from debconf, they needed for the installation phase only
    db_set contentserv-cs-core/db_password ""
    db_set contentserv-cs-core/db_password_again ""

}

echo "CS Core Postinstall Script"

# If the postinst script has been called after upgrade, then
# do not do anything, simpy exit with retval 0
if ! [ "$2" = "" ];
then
    exit 0
fi

db_input high contentserv-cs-core/installation_type || true
db_go

db_get contentserv-cs-core/installation_type
case "$RET" in
  alias)
      echo "Proceed to alias installation"
      do_alias
      ;;
  vhost)
      echo "Proceed to vhost installation"
      do_vhost
      ;;
  default-vhost)
      echo "default vhost installation"
      do_default_vhost
      ;;
  skip)
      echo "skipping Apache configuration"
      ;;
esac

db_input high contentserv-cs-core/create_new_project || true
db_go

db_get contentserv-cs-core/create_new_project
case "$RET" in
  "true")
      echo "Proceed to the project creation"
      do_new_project
      ;;
  "false")
      echo "skipping project creation"
      ;;
esac

apache_status_read
