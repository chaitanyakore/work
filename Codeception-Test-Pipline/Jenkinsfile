#!groovy

pipeline {
  agent {
    label "codeception"
  }
  stages {
    stage('SVN update CS source code') {
      agent {
          label "codeception"
      }
      steps {
        checkout(
            [$class: 'SubversionSCM',
            additionalCredentials: [],
            excludedCommitMessages: '',
            excludedRegions: '',
            excludedRevprop: '',
            excludedUsers: '',
            filterChangelog: false,
            ignoreDirPropChanges: false,
            includedRegions: '',
            locations: [
                [cancelProcessOnExternalsFail: true,
                credentialsId: '90e7e239-48b2-455a-a72e-68522c3e70fd', depthOption: 'infinity',
                ignoreExternalsOption: true,
                local: 'source',
                remote: 'https://svn.contentserv.com/development/trunk']
                ],
            quietOperation: true,
            workspaceUpdater: [$class: 'UpdateUpdater']])
      }
    }
    stage('Start Docker Environment') {
        agent {
            label "codeception"
        }
        steps {
            sh 'cat /var/lib/contentserv-cs/cs_docker__password.txt | docker login docker.contentserv.com --username buildmasters --password-stdin'
            sh 'php -f source/admin.test/testsystem/imagebuild/build.php ${CS_RELEASE} start_system';
            sh 'docker exec -i cs${CS_RELEASE}web sh -c "chmod -R 777 /var/www/CSLive/data"';
        }
    }
    stage('Run Update Data Model') {
        agent {
            label "codeception"
        }
        steps {
            sh 'docker pull docker.contentserv.com/cs-dev/mariadb-test:latest';
            sh 'docker image prune -f';
            sh 'docker exec -i cs${CS_RELEASE}web sh -c "cd /var/www/admin.test && php testsystem/service.php start"';
            sh 'docker exec -i cs${CS_RELEASE}web sh -c "cd /var/www/admin.test && php testsystem/service.php update"';
            sh 'docker exec -i cs${CS_RELEASE}web sh -c "cd /var/www/admin.test && php testsystem/service.php stop"';
        }
    }
    stage('Run Codeception Functional Tests') {
        agent {
            label "codeception"
        }
        steps {
            ansiColor('xterm') {
                sh 'docker exec -i cs${CS_RELEASE}web sh -c "cd /var/www/admin.test && php codecept run functional --html --xml"';
            }
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'source/admin.test/_output', reportFiles: 'report.html', reportName: 'HTML Report', reportTitles: 'Contentserv Functional Tests - Codeception'])
            perfReport errorFailedThreshold: 0, sourceDataFiles: 'source/admin.test/_output/report.xml'
        }
    }
    stage('Stop Docker Environment') {
        agent {
            label "codeception"
        }
        steps {
            sh 'docker exec -i cs${CS_RELEASE}web sh -c "rm -Rf source/CSLive/data/cache"';
            sh 'php -f source/admin.test/testsystem/imagebuild/build.php ${CS_RELEASE} stop_system';
        }
    }
  }


  post {
    failure {
      emailext (
        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
        to: "buildmasters@contentserv.com"
      )
    }
  }
}
