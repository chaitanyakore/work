#!/bin/bash

set -e

# Source debconf library
. /usr/share/debconf/confmodule

# Tweaks can come here
CURL_EMULATED_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0"
CS_PROTO="http://"
CS_HOST=localhost
CS_FOLDER="/"
CS_LIVE=CSLive
CS_PROJECT_CONF=""
CS_URL=""
# These parameters are standard and normally should not be tweaked
CS_APP=/var/lib/contentserv-cs
CS_DEFAULT_TEMPLATE=admin/core/samples/default
CS_APACHE_CONF=/etc/apache2/conf-available/contentserv.conf
CS_VHOST_CONF=/etc/apache2/sites-available/000-default.conf
CS_VHOST_TEMPLATE=/var/lib/contentserv-cs/admin/core/samples/apache-vhost/cs-vhost-template.conf
CS_LIVE_INSTALL_LOG=/var/log/cs_live_install.log


ARG_1="$1"
ARG_2="$2"

echo "CSLive demo project Postinstall Script"

apache_status_read() {
    if service apache2 status | grep -q -e "not running" ;
    then
        echo "Apache is NOT running, will be started for the install process and stopped just before exit"
        CS_APACHE_ALREADY_RUNNING=0
    else
        echo "Apache is running, keeping the state for the clean exit"
        CS_APACHE_ALREADY_RUNNING=1
    fi
}

apache_start_if_not_running() {
    if [ "$CS_APACHE_ALREADY_RUNNING" -eq 0 ] ;
    then
        if ! service apache2 start ;
        then
            echo "Unable to start apache using init.d script"
            exit 1
        fi
    fi
}

# apache_cleanup stops apache if it wasn't running upon postinst start
apache_cleanup() {
    if [ "$CS_APACHE_ALREADY_RUNNING" -eq 0 ] ;
    then
        echo "Apache wasn't running upon postinst, will be stopped"
        service apache2 stop
    else
        echo "Apache was running upon postinst, leaving it running"
    fi
}

apache_reload_and_check() {
    if apachectl -t;
    then
        echo "Config is OK, reloading apache daemon..."
        service apache2 reload
    else
        echo "Apache rejects configuration, please check the config"
        exit 1
    fi
    echo "${CS_URL}${CS_SIMPLIFIED_INSTALL} will be checked, sleeping 5 sec to ensure apache reload"
    sleep 5
    if curl -s -N -A "$CURL_EMULATED_AGENT" "${CS_URL}${CS_SIMPLIFIED_INSTALL}" | grep -q -e "^.*title.*Create new project.*" ;
    then
        echo CS health check OK
    else
        echo CS is either not responging or already configured
        exit 1
    fi
}


do_cslive_restore_from_template() {
    CS_LIVE_DISTCONF="${CS_APP}/${CS_LIVE}/data/dist-config.php"
    CS_LIVE_CONF="${CS_APP}/${CS_LIVE}/data/config.php"
    if [ ! -f $CS_LIVE_DISTCONF ]
    then
        echo "dist-config.php does not exist!"
        exit 1
    fi
    if ! cp -f $CS_LIVE_DISTCONF $CS_LIVE_CONF ;
    then
        echo "Unable to create config.php file, aborting..."
        exit 1
    fi
    echo "Fixing config.php permissions..."
    if chown www-data:www-data $CS_LIVE_CONF && chmod 644 $CS_LIVE_CONF ;
    then
        echo "OK, permissions fixed"
    else
        echo "Failed to change file mode, aborting..."
        exit 1
    fi
    echo "Creating archive symlink to allow install-from-scratch emulation..."
    CS_LIVE_BACKUP_FOLDER=${CS_APP}/${CS_LIVE}/data/backup
    CS_LIVE_BACKUP=${CS_LIVE_BACKUP_FOLDER}/data.CSLive.zip.php
    CS_LIVE_BACKUP_SYMLINK=${CS_LIVE_BACKUP_FOLDER}/data.install.zip.php
    if ! ln -f -s $CS_LIVE_BACKUP $CS_LIVE_BACKUP_SYMLINK ;
    then
        echo "Failed to create symlink, aborting..."
        exit 1
    fi
    # change the content of config.php according to user input
    db_get contentserv-cs-live/db_host
    CS_DB_HOST="$RET"
    db_get contentserv-cs-live/db_name
    CS_DB_NAME="$RET"
    db_get contentserv-cs-live/db_user
    CS_DB_USER="$RET"
    db_get contentserv-cs-live/db_table_prefix
    CS_DB_TABLE_PREFIX="$RET"
    db_get contentserv-cs-live/db_password
    # encode DB password
    CS_DB_PASS_PLAIN="$RET"
    CS_DB_PASS_ENCODED=$(printf '%s' "$RET" | base64)
    # echo "All variables:"
    # echo "CS_DB_HOST: $CS_DB_HOST"
    # echo "CS_DB_NAME: $CS_DB_NAME"
    # echo "CS_DB_USER: $CS_DB_USER"
    # echo "CS_DB_TABLE_PREFIX: $CS_DB_TABLE_PREFIX"
    # echo "CS_DB_PASS_ENCODED: $CS_DB_PASS_ENCODED"
    # Edit config.php in-place
    sed -i -e "s#^.*Database:-ContentTable.*#  \'Database:-ContentTable\' => \'$CS_DB_TABLE_PREFIX\',#g" ${CS_LIVE_CONF}
    sed -i -e "s#^.*Database:-Host.*#  \'Database:-Host\' => \'$CS_DB_HOST\',#g" ${CS_LIVE_CONF}
    sed -i -e "s#^.*Database:-Name.*#  \'Database:-Name\' => \'$CS_DB_NAME\',#g" ${CS_LIVE_CONF}
    sed -i -e "s#^.*Database:-User.*#  \'Database:-User\' => \'$CS_DB_USER\',#g" ${CS_LIVE_CONF}
    sed -i -e "s#^.*Database:-Password.*#  \'Database:-Password\' => \'$CS_DB_PASS_ENCODED\',#g" ${CS_LIVE_CONF}
    sed -i -e "s#^.*NewProject:-Name.*#  \'NewProject:-Name\' => \'$CS_NEW_PROJECT\',#g" ${CS_LIVE_CONF}
#    sed -i -e "s#^.*core:ProjectName.*#  \'core:ProjectName\' => \'$CS_NEW_PROJECT\',#g" ${CS_LIVE_CONF}
#    sed -i -e "s#^.*core:ServerPath.*#  \'core:ServerPath\' => \'$CS_APP\',#g" ${CS_LIVE_CONF}
#    sed -i -e "s#^.*core:ServerName.*#  \'core:ServerName\' => \'$CS_HOST\',#g" ${CS_LIVE_CONF}
    # Create DB if not exists
    DB_CREATE_QUERY="CREATE DATABASE IF NOT EXISTS \`$CS_DB_NAME\` DEFAULT CHARACTER SET UTF8;"
    if ! echo $DB_CREATE_QUERY | mysql -u "$CS_DB_USER" -h "$CS_DB_HOST" --password="$CS_DB_PASS_PLAIN";
    then
        echo "MySQL returned: $?"
        exit 1
    fi
    CS_LIVE_INSTALL_COMMAND="/admin/install.php?action=install&Installation=true&ctsWebsite=CSLive&doBackup=false"
    echo "Calling installation URL..."
    if ! curl -s -N -A "$CURL_EMULATED_AGENT" "${CS_URL}$CS_LIVE_INSTALL_COMMAND" | html2text | tee $CS_LIVE_INSTALL_LOG | grep -q "Installation finished" ;
    then
        echo "Failed to install CSLive project, see the log file for details: $CS_LIVE_INSTALL_LOG"
        exit 1
    fi
    echo "Project $CS_LIVE has been successfully created, see the log file for details: $CS_LIVE_INSTALL_LOG"
}

do_cslive_project() {
    # Collect necessary credentials (grouped)
    db_input high contentserv-cs-live/db_host || true
    db_input high contentserv-cs-live/db_name || true
    db_input high contentserv-cs-live/db_table_prefix || true
    db_input high contentserv-cs-live/db_user || true
    db_go
    if [ "$ARG_1" == "configure" ];
    then
        while :;
        do
            RET=""
            db_input high contentserv-cs-live/db_password || true
            db_go
            db_get contentserv-cs-live/db_password
            # if password isn't empty we ask for password verification
            if [ -z "$RET" ]; 
            then
                db_fset contentserv-cs-live/db_password seen false
                db_fset contentserv-cs-live/db_password_again seen false
                break
            fi
            ROOT_PW="$RET"
            db_input high contentserv-cs-live/db_password_again || true
            db_go
            db_get contentserv-cs-live/db_password_again
            if [ "$RET" == "$ROOT_PW" ]; 
            then
                ROOT_PW=''
                break
            fi
            db_fset contentserv-cs-live/db_password_mismatch seen false
            db_input critical contentserv-cs-live/db_password_mismatch
            db_set contentserv-cs-live/db_password ""
            db_set contentserv-cs-live/db_password_again ""
            db_go
        done
    fi
    # Proceed to project creation, call the procedure only if the folder does not exist
    if [ ! -d "${CS_APP}/${CS_LIVE}" ];
    then
        echo "CSLive folder does not exists, unable to proceed with install..."
        db_fset contentserv-cs-live/cslive_folder_not_exists seen false
        db_input critical contentserv-cs-live/cslive_folder_not_exists
        db_go
    fi
    do_cslive_restore_from_template
}


db_input high contentserv-cs-live/activate_cslive || true
db_go

db_get contentserv-cs-core/installation_type
case "$RET" in
  alias)
      db_get contentserv-cs-core/app_subfolder
      CS_FOLDER="$RET"
      CS_URL=${CS_PROTO}${CS_HOST}/${CS_FOLDER}
      ;;
  vhost)
      db_get contentserv-cs-core/app_vhost
      CS_HOST="$RET"
      CS_URL=${CS_PROTO}${CS_HOST}
      ;;
  default-vhost)
      CS_HOST=localhost
      CS_URL=${CS_PROTO}${CS_HOST}
      ;;
  *)
      echo "No automated installation possible, aborting..."
      exit 1
      ;;
esac

db_get contentserv-cs-live/activate_cslive
case "$RET" in
  "true")
      echo "Proceed to the CSLive activation"
      apache_status_read
      apache_start_if_not_running
      do_cslive_project
      ;;
  "false")
      echo "skipping  CSLive activation"
      ;;
esac

apache_cleanup


