#!groovy

pipeline {
	agent {
			dockerfile { 
                            dir 'ubuntu-xenial-mysql'
                            args '-v /Jenkins-CI/tools:/Jenkins-CI/tools' 
                        }
	}
	stages {
		stage('CS Source & Additional Tools Checkout'){
			steps {
			   dir('www') {
				checkout poll: true, scm: [$class: 'SubversionSCM', filterChangelog: false, \
			          ignoreDirPropChanges: false, \
			          locations: [[credentialsId: '90e7e239-48b2-455a-a72e-68522c3e70fd', \
			          depthOption: 'infinity', ignoreExternalsOption: true, \
			          local: '.', remote: 'https://svn.contentserv.intern/development/trunk']], \
			          workspaceUpdater: [$class: 'UpdateUpdater']]
				sh 'cd www && patch -p0 <../allow_linux_firefox.patch || true'
				sh 'rm -rf www/RobotizedTest* || true'
			    }
			    dir('test-tools') {
				checkout poll: false, scm: [$class: 'GitSCM', \
			          branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, \
                                  extensions: [], submoduleCfg: [], \
                                  userRemoteConfigs: [[credentialsId: 'dfa6f5a3-608c-4f05-bb23-3c096c4cc430', \
                                  url: 'https://mrjenkins@git.contentserv.intern/DevOps/Deployment/CS-Jenkins-Slave-Tools']]]
                            }
			}
		}
		stage('Submit the sources to SonarQube') {
			environment {
			        SONAR_SCANNER_OPTS = "-Xmx2G -Xms256m"
			}
			steps {
                            // Quality gate disabled until code readiness
                            sh 'echo "Quality Gate submission (disabled)"'
                            /* 
			    script {
                                def scannerHome = tool 'SonarQube Scanner';
                                withSonarQubeEnv('SonarQube Local') {
                                    sh "java -version"
                            //        sh "${scannerHome}/bin/sonar-scanner"
                                }
                            } */
			}
		}
		stage('Configure Apache vhost file and logs directory') {
			steps {
			    dir('apache-logs') {
			        sh 'cd apache-logs && touch .placeholder && rm -f cs-*.log'
			    }
			    sh 'test-tools/slave-scripts/configure_apache.sh'
			}
		}
		stage('Start Web- and Database Servers') {
			steps {
                            sh 'service apache2 start'
                            sh 'service mysql start'
                        }
                }
                stage('Test Suite') {
                        environment {
                            DISPLAY = ":10.0"
                        }
                        steps {
                            sh 'echo Test Suite starts, fire up the Xvfb'
                            sh 'nohup Xvfb :10.0 &'
                            dir('robot-output-merged') {
                                 sh 'robot --outputdir robot-output-merged robotframework-suite/??_suite*.robot || true'
                            }
                            script {
                               def full_path_robot_output = WORKSPACE + '/robot-output-merged'
                               build job: 'Analyze_And_Publish_Robotframework_Results', parameters: [string(name: 'PATH_TO_RF_RESULTS', value: full_path_robot_output)]
                            }
                        }
                }
                stage('Quality Gate') {
                    steps {
                        // Quality gate disabled until code readiness
                        sh 'echo "Quality Gate results collection (disabled)"'
                        /* script {
                            timeout(time: 1, unit: 'HOURS') {
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                }
                            }
                        }*/
                    }
                }
                stage('Archiving results and cleaning up') {
                        steps {
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'apache-logs/*.log'
                            sh 'rm -f apache-logs/*'
                            sh 'rm -rf www/RobotizedTest* || true'
                        }
		}
	}
}
